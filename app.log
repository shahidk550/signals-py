2025-05-18 13:55:29,124 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-18 13:55:29,125 - INFO - [33mPress CTRL+C to quit[0m
2025-05-18 13:55:29,125 - INFO -  * Restarting with stat
2025-05-18 13:55:29,518 - WARNING -  * Debugger is active!
2025-05-18 13:55:29,525 - INFO -  * Debugger PIN: 704-041-615
2025-05-18 13:57:06,055 - INFO - Database tables created successfully
2025-05-18 13:57:06,080 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-18 13:57:06,081 - INFO - [33mPress CTRL+C to quit[0m
2025-05-18 13:57:06,081 - INFO -  * Restarting with stat
2025-05-18 13:57:06,446 - INFO - Database tables created successfully
2025-05-18 13:57:06,464 - WARNING -  * Debugger is active!
2025-05-18 13:57:06,471 - INFO -  * Debugger PIN: 704-041-615
2025-05-18 13:57:27,357 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 13:57:27,357 - WARNING - UI register - Form validation failed: {}
2025-05-18 13:57:27,372 - INFO - 127.0.0.1 - - [18/May/2025 13:57:27] "GET /register HTTP/1.1" 200 -
2025-05-18 13:57:27,390 - INFO - 127.0.0.1 - - [18/May/2025 13:57:27] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 13:57:27,484 - INFO - 127.0.0.1 - - [18/May/2025 13:57:27] "[33mGET /apple-touch-icon-precomposed.png HTTP/1.1[0m" 404 -
2025-05-18 13:57:27,770 - INFO - 127.0.0.1 - - [18/May/2025 13:57:27] "[33mGET /apple-touch-icon.png HTTP/1.1[0m" 404 -
2025-05-18 13:58:09,720 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 13:58:09,720 - WARNING - UI register - Form validation failed: {}
2025-05-18 13:58:09,721 - INFO - 127.0.0.1 - - [18/May/2025 13:58:09] "GET /register HTTP/1.1" 200 -
2025-05-18 13:58:09,729 - INFO - 127.0.0.1 - - [18/May/2025 13:58:09] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 13:58:21,774 - INFO - 127.0.0.1 - - [18/May/2025 13:58:21] "[32mGET /list HTTP/1.1[0m" 302 -
2025-05-18 13:58:21,790 - INFO - 127.0.0.1 - - [18/May/2025 13:58:21] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-18 13:58:21,796 - INFO - 127.0.0.1 - - [18/May/2025 13:58:21] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 13:59:44,021 - INFO - 127.0.0.1 - - [18/May/2025 13:59:44] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-18 13:59:44,028 - INFO - 127.0.0.1 - - [18/May/2025 13:59:44] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 13:59:53,731 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 13:59:53,731 - WARNING - UI register - Form validation failed: {}
2025-05-18 13:59:53,732 - INFO - 127.0.0.1 - - [18/May/2025 13:59:53] "GET /register HTTP/1.1" 200 -
2025-05-18 13:59:53,739 - INFO - 127.0.0.1 - - [18/May/2025 13:59:53] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 14:11:21,687 - INFO - Database tables created successfully
2025-05-18 14:11:21,718 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-18 14:11:21,718 - INFO - [33mPress CTRL+C to quit[0m
2025-05-18 14:11:21,719 - INFO -  * Restarting with stat
2025-05-18 14:11:22,085 - INFO - Database tables created successfully
2025-05-18 14:11:22,105 - WARNING -  * Debugger is active!
2025-05-18 14:11:22,112 - INFO -  * Debugger PIN: 704-041-615
2025-05-18 14:11:26,602 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 14:11:26,603 - WARNING - UI register - Form validation failed: {}
2025-05-18 14:11:26,615 - INFO - 127.0.0.1 - - [18/May/2025 14:11:26] "GET /register HTTP/1.1" 200 -
2025-05-18 14:11:26,622 - INFO - 127.0.0.1 - - [18/May/2025 14:11:26] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 14:11:27,782 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 14:11:27,783 - WARNING - UI register - Form validation failed: {}
2025-05-18 14:11:27,784 - INFO - 127.0.0.1 - - [18/May/2025 14:11:27] "GET /register HTTP/1.1" 200 -
2025-05-18 14:11:27,790 - INFO - 127.0.0.1 - - [18/May/2025 14:11:27] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 14:11:34,649 - INFO - 127.0.0.1 - - [18/May/2025 14:11:34] "[32mGET /list HTTP/1.1[0m" 302 -
2025-05-18 14:11:34,663 - INFO - 127.0.0.1 - - [18/May/2025 14:11:34] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-18 14:11:34,667 - INFO - 127.0.0.1 - - [18/May/2025 14:11:34] "[33mGET /static/css/styles.css HTTP/1.1[0m" 404 -
2025-05-18 14:28:14,839 - INFO - Database tables created successfully
2025-05-18 14:28:14,874 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-18 14:28:14,874 - INFO - [33mPress CTRL+C to quit[0m
2025-05-18 14:28:14,874 - INFO -  * Restarting with stat
2025-05-18 14:28:15,238 - INFO - Database tables created successfully
2025-05-18 14:28:15,258 - WARNING -  * Debugger is active!
2025-05-18 14:28:15,265 - INFO -  * Debugger PIN: 704-041-615
2025-05-18 14:28:35,155 - INFO - 127.0.0.1 - - [18/May/2025 14:28:35] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-18 14:28:35,165 - INFO - 127.0.0.1 - - [18/May/2025 14:28:35] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-18 14:28:38,829 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 0294d87df74e983b6869c2a967dcff945633974d
2025-05-18 14:28:38,829 - WARNING - UI register - Form validation failed: {}
2025-05-18 14:28:38,837 - INFO - 127.0.0.1 - - [18/May/2025 14:28:38] "GET /register HTTP/1.1" 200 -
2025-05-18 14:28:38,843 - INFO - 127.0.0.1 - - [18/May/2025 14:28:38] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-18 14:36:43,068 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-18 14:36:43,164 - INFO -  * Restarting with stat
2025-05-18 14:36:43,592 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-18 14:36:43,667 - INFO - Database tables created successfully
2025-05-18 14:36:43,690 - WARNING -  * Debugger is active!
2025-05-18 14:36:43,697 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 11:25:30,722 - INFO - 127.0.0.1 - - [19/May/2025 11:25:30] "GET /login HTTP/1.1" 200 -
2025-05-19 11:25:30,730 - INFO - 127.0.0.1 - - [19/May/2025 11:25:30] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:25:30,731 - INFO - 127.0.0.1 - - [19/May/2025 11:25:30] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:25:43,065 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 2fb94b48e15e090551ae8063f686034de7e1b267
2025-05-19 11:25:43,065 - WARNING - UI register - Form validation failed: {}
2025-05-19 11:25:43,072 - INFO - 127.0.0.1 - - [19/May/2025 11:25:43] "GET /register HTTP/1.1" 200 -
2025-05-19 11:25:43,079 - INFO - 127.0.0.1 - - [19/May/2025 11:25:43] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:25:46,043 - INFO - Login - User logged in: shahidk550@gmail.com
2025-05-19 11:25:46,043 - INFO - 127.0.0.1 - - [19/May/2025 11:25:46] "[32mPOST /login HTTP/1.1[0m" 302 -
2025-05-19 11:25:46,055 - INFO - Index - User: shahidk550@gmail.com, Role: user, ID: 1, Tasks: ['Task 1 - IOE  (User ID: 1)']
2025-05-19 11:25:46,061 - INFO - 127.0.0.1 - - [19/May/2025 11:25:46] "GET /list HTTP/1.1" 200 -
2025-05-19 11:25:46,068 - INFO - 127.0.0.1 - - [19/May/2025 11:25:46] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:50,796 - INFO - Index - User: shahidk550@gmail.com, Role: user, ID: 1, Tasks: ['Task 1 - IOE  (User ID: 1)']
2025-05-19 11:39:50,797 - INFO - 127.0.0.1 - - [19/May/2025 11:39:50] "GET /list HTTP/1.1" 200 -
2025-05-19 11:39:50,799 - INFO - 127.0.0.1 - - [19/May/2025 11:39:50] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:50,803 - INFO - 127.0.0.1 - - [19/May/2025 11:39:50] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:51,147 - INFO - 127.0.0.1 - - [19/May/2025 11:39:51] "[32mGET /login?next=/list HTTP/1.1[0m" 302 -
2025-05-19 11:39:51,154 - INFO - Index - User: shahidk550@gmail.com, Role: user, ID: 1, Tasks: ['Task 1 - IOE  (User ID: 1)']
2025-05-19 11:39:51,155 - INFO - 127.0.0.1 - - [19/May/2025 11:39:51] "GET /list HTTP/1.1" 200 -
2025-05-19 11:39:51,161 - INFO - 127.0.0.1 - - [19/May/2025 11:39:51] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:51,640 - INFO - 127.0.0.1 - - [19/May/2025 11:39:51] "[33mGET / HTTP/1.1[0m" 404 -
2025-05-19 11:39:56,309 - INFO - 127.0.0.1 - - [19/May/2025 11:39:56] "[32mGET /logout HTTP/1.1[0m" 302 -
2025-05-19 11:39:56,320 - INFO - 127.0.0.1 - - [19/May/2025 11:39:56] "GET /login HTTP/1.1" 200 -
2025-05-19 11:39:56,323 - INFO - 127.0.0.1 - - [19/May/2025 11:39:56] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:56,324 - INFO - 127.0.0.1 - - [19/May/2025 11:39:56] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:57,357 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: 2fb94b48e15e090551ae8063f686034de7e1b267
2025-05-19 11:39:57,358 - WARNING - UI register - Form validation failed: {}
2025-05-19 11:39:57,359 - INFO - 127.0.0.1 - - [19/May/2025 11:39:57] "GET /register HTTP/1.1" 200 -
2025-05-19 11:39:57,360 - INFO - 127.0.0.1 - - [19/May/2025 11:39:57] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:39:57,363 - INFO - 127.0.0.1 - - [19/May/2025 11:39:57] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 11:40:03,947 - INFO - 127.0.0.1 - - [19/May/2025 11:40:03] "[33mGET / HTTP/1.1[0m" 404 -
2025-05-19 11:40:18,364 - WARNING - API register_form - Form validation failed: {}
2025-05-19 11:40:18,364 - INFO - API register_form - Rendering form
2025-05-19 11:40:18,371 - INFO - 127.0.0.1 - - [19/May/2025 11:40:18] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 11:40:18,377 - INFO - 127.0.0.1 - - [19/May/2025 11:40:18] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 12:22:16,186 - INFO - The CSRF tokens do not match.
2025-05-19 12:22:16,187 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF tokens do not match.']}
2025-05-19 12:22:16,187 - INFO - API register_form - Rendering form
2025-05-19 12:22:16,189 - INFO - 127.0.0.1 - - [19/May/2025 12:22:16] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 12:22:16,198 - INFO - 127.0.0.1 - - [19/May/2025 12:22:16] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 12:31:56,492 - INFO - API register_form - Form validated, email: test123@gmail.com
2025-05-19 12:31:56,500 - WARNING - API register - Password complexity not met: test123@gmail.com
2025-05-19 12:31:56,500 - INFO - 127.0.0.1 - - [19/May/2025 12:31:56] "[31m[1mPOST /api/register HTTP/1.1[0m" 400 -
2025-05-19 12:31:56,501 - INFO - API register_form - Response status: 400, body: {
  "error": "Password must have at least one uppercase, one lowercase, one number, and one special character",
  "error_code": "password_complexity"
}

2025-05-19 12:31:56,501 - WARNING - API register_form - Registration failed: Password must have at least one uppercase, one lowercase, one number, and one special character, code: password_complexity
2025-05-19 12:31:56,502 - INFO - 127.0.0.1 - - [19/May/2025 12:31:56] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 12:31:56,509 - INFO - 127.0.0.1 - - [19/May/2025 12:31:56] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 12:32:40,861 - INFO - API register_form - Form validated, email: test123@gmail.com
2025-05-19 12:32:40,880 - INFO - 127.0.0.1 - - [19/May/2025 12:32:40] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 12:32:40,881 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OEVJLeOvjKusqKYcSSK4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4665392352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4665130528">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4665127968">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4665130688">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4665129248">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4665130208">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4665129728">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">394</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be at least 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws">    </span>if not re.match(r&#39;^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&amp;])[A-Za-z\d@$!%*?&amp;]{11,}$&#39;, password):</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password complexity not met: {email}&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must have at least one uppercase, one lowercase, one number, and one special character&#39;, &#39;error_code&#39;: &#39;password_complexity&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 394, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 394, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 12:32:40,881 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "OEVJLeOvjKusqKYcSSK4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4665392352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4665130528">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4665127968">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4665130688">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4665129248">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4665130208">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4665129728">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">394</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be at least 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws">    </span>if not re.match(r&#39;^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&amp;])[A-Za-z\d@$!%*?&amp;]{11,}$&#39;, password):</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password complexity not met: {email}&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must have at least one uppercase, one lowercase, one number, and one special character&#39;, &#39;error_code&#39;: &#39;password_complexity&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 394, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 394, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 12:32:40,882 - INFO - 127.0.0.1 - - [19/May/2025 12:32:40] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 12:32:40,890 - INFO - 127.0.0.1 - - [19/May/2025 12:32:40] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 12:35:06,364 - INFO - API register_form - Form validated, email: test123@gmail.com
2025-05-19 12:35:06,367 - WARNING - API register - Password complexity not met: test123@gmail.com
2025-05-19 12:35:06,367 - INFO - 127.0.0.1 - - [19/May/2025 12:35:06] "[31m[1mPOST /api/register HTTP/1.1[0m" 400 -
2025-05-19 12:35:06,368 - INFO - API register_form - Response status: 400, body: {
  "error": "Password must have at least one uppercase, one lowercase, one number, and one special character",
  "error_code": "password_complexity"
}

2025-05-19 12:35:06,368 - WARNING - API register_form - Registration failed: Password must have at least one uppercase, one lowercase, one number, and one special character, code: password_complexity
2025-05-19 12:35:06,369 - INFO - 127.0.0.1 - - [19/May/2025 12:35:06] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 12:35:06,377 - INFO - 127.0.0.1 - - [19/May/2025 12:35:06] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:18:42,612 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 15:18:42,708 - INFO -  * Restarting with stat
2025-05-19 15:18:43,123 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:18:43,197 - INFO - Database tables created successfully
2025-05-19 15:18:43,221 - WARNING -  * Debugger is active!
2025-05-19 15:18:43,229 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 15:19:07,449 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:19:07,513 - INFO - Database tables created successfully
2025-05-19 15:19:07,540 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 15:19:07,541 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 15:19:07,541 - INFO -  * Restarting with stat
2025-05-19 15:19:07,846 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:19:07,907 - INFO - Database tables created successfully
2025-05-19 15:19:07,927 - WARNING -  * Debugger is active!
2025-05-19 15:19:07,933 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 15:19:26,053 - INFO - The CSRF token has expired.
2025-05-19 15:19:26,054 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF token has expired.']}
2025-05-19 15:19:26,054 - INFO - API register_form - Rendering form
2025-05-19 15:19:26,061 - INFO - 127.0.0.1 - - [19/May/2025 15:19:26] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 15:19:26,071 - INFO - 127.0.0.1 - - [19/May/2025 15:19:26] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:19:40,749 - INFO - 127.0.0.1 - - [19/May/2025 15:19:40] "[32mGET /list HTTP/1.1[0m" 302 -
2025-05-19 15:19:40,764 - INFO - 127.0.0.1 - - [19/May/2025 15:19:40] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-19 15:19:40,770 - INFO - 127.0.0.1 - - [19/May/2025 15:19:40] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:19:42,735 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: d7169b85e32f79911bab640bc2c62a41d8aaf37a
2025-05-19 15:19:42,735 - WARNING - UI register - Form validation failed: {}
2025-05-19 15:19:42,743 - INFO - 127.0.0.1 - - [19/May/2025 15:19:42] "GET /register HTTP/1.1" 200 -
2025-05-19 15:19:42,749 - INFO - 127.0.0.1 - - [19/May/2025 15:19:42] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:19:57,234 - WARNING - API register_form - Form validation failed: {}
2025-05-19 15:19:57,234 - INFO - API register_form - Rendering form
2025-05-19 15:19:57,235 - INFO - 127.0.0.1 - - [19/May/2025 15:19:57] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 15:19:57,242 - INFO - 127.0.0.1 - - [19/May/2025 15:19:57] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:20:44,474 - INFO - API register_form - Form validated, email: test1@gmail.com
2025-05-19 15:20:44,490 - INFO - 127.0.0.1 - - [19/May/2025 15:20:44] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 15:20:44,492 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "sLDQ7moTrUiMdFM2r96X";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4360017920">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360016960">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4360018240">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4360018560">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4360018720">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4360018880">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4360019040">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">391</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 391, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 391, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:20:44,492 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "sLDQ7moTrUiMdFM2r96X";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4360017920">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360016960">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4360018240">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4360018560">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4360018720">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4360018880">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4360019040">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">391</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 391, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 391, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:20:44,493 - INFO - 127.0.0.1 - - [19/May/2025 15:20:44] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 15:20:44,501 - INFO - 127.0.0.1 - - [19/May/2025 15:20:44] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:31:20,865 - INFO - 127.0.0.1 - - [19/May/2025 15:31:20] "[33mGET /apple-touch-icon-precomposed.png HTTP/1.1[0m" 404 -
2025-05-19 15:31:20,866 - INFO - 127.0.0.1 - - [19/May/2025 15:31:20] "[33mGET /apple-touch-icon.png HTTP/1.1[0m" 404 -
2025-05-19 15:31:20,867 - INFO - 127.0.0.1 - - [19/May/2025 15:31:20] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-05-19 15:42:49,035 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 15:42:49,117 - INFO -  * Restarting with stat
2025-05-19 15:42:49,542 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:42:49,613 - INFO - Database tables created successfully
2025-05-19 15:42:49,638 - WARNING -  * Debugger is active!
2025-05-19 15:42:49,645 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 15:43:05,396 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:43:05,459 - INFO - Database tables created successfully
2025-05-19 15:43:05,488 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 15:43:05,488 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 15:43:05,489 - INFO -  * Restarting with stat
2025-05-19 15:43:05,799 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:43:05,861 - INFO - Database tables created successfully
2025-05-19 15:43:05,880 - WARNING -  * Debugger is active!
2025-05-19 15:43:05,886 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 15:43:08,285 - WARNING - API register_form - Form validation failed: {}
2025-05-19 15:43:08,285 - INFO - API register_form - Rendering form
2025-05-19 15:43:08,298 - INFO - 127.0.0.1 - - [19/May/2025 15:43:08] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 15:43:08,315 - INFO - 127.0.0.1 - - [19/May/2025 15:43:08] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:43:30,614 - INFO - API register_form - Form validated, email: sam123@gmail.com
2025-05-19 15:43:30,614 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 15:43:30,623 - INFO - 127.0.0.1 - - [19/May/2025 15:43:30] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 15:43:30,625 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgRqEy7ZsBIrQVwjpBXD";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4509731392">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4509731072">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4509731712">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4509732032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4509732192">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4509732352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4509732512">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 392, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 392, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:43:30,625 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "rgRqEy7ZsBIrQVwjpBXD";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4509731392">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4509731072">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4509731712">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4509732032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4509732192">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4509732352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4509732512">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 392, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 392, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:43:30,625 - INFO - 127.0.0.1 - - [19/May/2025 15:43:30] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 15:43:30,633 - INFO - 127.0.0.1 - - [19/May/2025 15:43:30] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:49:08,406 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:49:08,474 - INFO - Database tables created successfully
2025-05-19 15:49:08,504 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 15:49:08,504 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 15:49:08,505 - INFO -  * Restarting with stat
2025-05-19 15:49:08,811 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 15:49:08,871 - INFO - Database tables created successfully
2025-05-19 15:49:08,891 - WARNING -  * Debugger is active!
2025-05-19 15:49:08,898 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 15:49:11,228 - WARNING - API register_form - Form validation failed: {}
2025-05-19 15:49:11,229 - INFO - API register_form - Rendering form
2025-05-19 15:49:11,241 - INFO - 127.0.0.1 - - [19/May/2025 15:49:11] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 15:49:11,258 - INFO - 127.0.0.1 - - [19/May/2025 15:49:11] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:49:55,132 - WARNING - API register_form - Form validation failed: {'email': ['Invalid email address.']}
2025-05-19 15:49:55,132 - INFO - API register_form - Rendering form
2025-05-19 15:49:55,133 - INFO - 127.0.0.1 - - [19/May/2025 15:49:55] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 15:49:55,140 - INFO - 127.0.0.1 - - [19/May/2025 15:49:55] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 15:50:15,732 - INFO - API register_form - Form validated, email: sam123@yahoo.com
2025-05-19 15:50:15,732 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 15:50:15,746 - INFO - 127.0.0.1 - - [19/May/2025 15:50:15] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 15:50:15,747 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5oxRhPOMVD4jGUCa6KcJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4367977024">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4367976704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4367977344">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4367977664">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4367977824">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4367977984">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4367978144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 392, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 392, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:50:15,747 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5oxRhPOMVD4jGUCa6KcJ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4367977024">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4367976704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4367977344">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4367977664">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4367977824">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4367977984">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4367978144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">392</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># Validate password</pre>
<pre class="line before"><span class="ws">    </span>if len(password) &lt; 11:</pre>
<pre class="line before"><span class="ws">        </span>logger.warning(f&#34;API register - Password too short: {len(password)} chars&#34;)</pre>
<pre class="line before"><span class="ws">        </span>return jsonify({&#39;error&#39;: &#39;Password must be 11 characters long&#39;, &#39;error_code&#39;: &#39;password_too_short&#39;}), 400</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>api_mode = current_app.config[&#39;API_MODE&#39;]
<span class="ws">    </span>           ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logger.info(f&#34;API register - API_MODE: {api_mode}, email: {email}&#34;)</pre>
<pre class="line after"><span class="ws">    </span>if api_mode == &#39;external&#39;:</pre>
<pre class="line after"><span class="ws">        </span>existing_api_user = APIUser.query.filter_by(email=email).first()</pre>
<pre class="line after"><span class="ws">        </span>if existing_api_user:</pre>
<pre class="line after"><span class="ws">            </span>logger.warning(f&#34;API register - Email already taken: {email}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 392, in api_register
    api_mode = current_app.config[&#39;API_MODE&#39;]
               ^^^^^^^^^^^
NameError: name &#39;current_app&#39; is not defined. Did you mean: &#39;current_user&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 392, in api_register
    api_mode = current_app.config['API_MODE']
               ^^^^^^^^^^^
NameError: name 'current_app' is not defined. Did you mean: 'current_user'?


-->

2025-05-19 15:50:15,748 - INFO - 127.0.0.1 - - [19/May/2025 15:50:15] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 15:50:15,756 - INFO - 127.0.0.1 - - [19/May/2025 15:50:15] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:00:21,891 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:00:21,962 - INFO - Database tables created successfully
2025-05-19 16:00:21,993 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 16:00:21,993 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 16:00:21,993 - INFO -  * Restarting with stat
2025-05-19 16:00:22,302 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:00:22,363 - INFO - Database tables created successfully
2025-05-19 16:00:22,383 - WARNING -  * Debugger is active!
2025-05-19 16:00:22,390 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 16:00:29,502 - INFO - API register_form - Form validated, email: sam123@yahoo.com
2025-05-19 16:00:29,502 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 16:00:29,507 - INFO - API register - API_MODE: external, email: sam123@yahoo.com
2025-05-19 16:00:29,609 - INFO - API register - External API response status: 201, body: ""
2025-05-19 16:00:29,616 - INFO - 127.0.0.1 - - [19/May/2025 16:00:29] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 16:00:29,617 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "LscDcWcbctXK0u5oJGmN";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4506475776">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4506476096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4506476576">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4506482016">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4506481696">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4506481856">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4506482336">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">430</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#39;error&#39;: &#39;Invalid response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                        </span>&#39;error_code&#39;: &#39;invalid_response&#39;</pre>
<pre class="line before"><span class="ws">                    </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>response_json = response.json() if response.text else {}</pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 430, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 430, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 16:00:29,617 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "LscDcWcbctXK0u5oJGmN";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4506475776">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4506476096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4506476576">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4506482016">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4506481696">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4506481856">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4506482336">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">430</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#39;error&#39;: &#39;Invalid response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                        </span>&#39;error_code&#39;: &#39;invalid_response&#39;</pre>
<pre class="line before"><span class="ws">                    </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>response_json = response.json() if response.text else {}</pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 430, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 430, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 16:00:29,624 - INFO - 127.0.0.1 - - [19/May/2025 16:00:29] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 16:00:29,635 - INFO - 127.0.0.1 - - [19/May/2025 16:00:29] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:11:04,493 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 16:11:04,617 - INFO -  * Restarting with stat
2025-05-19 16:11:05,045 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:11:05,117 - INFO - Database tables created successfully
2025-05-19 16:11:05,143 - WARNING -  * Debugger is active!
2025-05-19 16:11:05,149 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 16:11:21,549 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:11:21,613 - INFO - Database tables created successfully
2025-05-19 16:11:21,640 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 16:11:21,641 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 16:11:21,641 - INFO -  * Restarting with stat
2025-05-19 16:11:21,953 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:11:22,016 - INFO - Database tables created successfully
2025-05-19 16:11:22,036 - WARNING -  * Debugger is active!
2025-05-19 16:11:22,044 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 16:11:24,090 - WARNING - API register_form - Form validation failed: {}
2025-05-19 16:11:24,090 - INFO - API register_form - Rendering form
2025-05-19 16:11:24,101 - INFO - 127.0.0.1 - - [19/May/2025 16:11:24] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 16:11:24,117 - INFO - 127.0.0.1 - - [19/May/2025 16:11:24] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:11:42,219 - INFO - API register_form - Form validated, email: sam123@gmail.com
2025-05-19 16:11:42,219 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 16:11:42,223 - INFO - API register - API_MODE: external, email: sam123@gmail.com
2025-05-19 16:11:42,325 - INFO - API register - External API response status: 201, body: ""
2025-05-19 16:11:42,331 - INFO - 127.0.0.1 - - [19/May/2025 16:11:42] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 16:11:42,332 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "iWgg00F0mN3Ve3TNbzS2";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>UnboundLocalError</h1>
<div class="detail">
  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4424510144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4424510464">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4424511264">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4424565120">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4424565280">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4424565440">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4424565920">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">430</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#39;error&#39;: &#39;Invalid response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                        </span>&#39;error_code&#39;: &#39;invalid_response&#39;</pre>
<pre class="line before"><span class="ws">                    </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>response_json = response_json()
<span class="ws">                </span>                ^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except ValueError:</pre>
<pre class="line after"><span class="ws">                </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response.text}&#34;)</pre>
<pre class="line after"><span class="ws">                </span>response_json = {}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))</pre></div>
</div>
</ul>
  <blockquote>UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 430, in api_register
    response_json = response_json()
                    ^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 430, in api_register
    response_json = response_json()
                    ^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'response_json' where it is not associated with a value


-->

2025-05-19 16:11:42,332 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "iWgg00F0mN3Ve3TNbzS2";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>UnboundLocalError</h1>
<div class="detail">
  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4424510144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4424510464">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4424511264">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4424565120">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4424565280">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4424565440">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4424565920">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">430</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                        </span>&#39;error&#39;: &#39;Invalid response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                        </span>&#39;error_code&#39;: &#39;invalid_response&#39;</pre>
<pre class="line before"><span class="ws">                    </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>response_json = response_json()
<span class="ws">                </span>                ^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except ValueError:</pre>
<pre class="line after"><span class="ws">                </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response.text}&#34;)</pre>
<pre class="line after"><span class="ws">                </span>response_json = {}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))</pre></div>
</div>
</ul>
  <blockquote>UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 430, in api_register
    response_json = response_json()
                    ^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable &#39;response_json&#39; where it is not associated with a value
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 430, in api_register
    response_json = response_json()
                    ^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'response_json' where it is not associated with a value


-->

2025-05-19 16:11:42,333 - INFO - 127.0.0.1 - - [19/May/2025 16:11:42] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 16:11:42,344 - INFO - 127.0.0.1 - - [19/May/2025 16:11:42] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:21:03,107 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:21:03,198 - INFO - Database tables created successfully
2025-05-19 16:21:03,235 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 16:21:03,235 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 16:21:03,235 - INFO -  * Restarting with stat
2025-05-19 16:21:03,547 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 16:21:03,610 - INFO - Database tables created successfully
2025-05-19 16:21:03,630 - WARNING -  * Debugger is active!
2025-05-19 16:21:03,637 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 16:21:05,813 - WARNING - API register_form - Form validation failed: {}
2025-05-19 16:21:05,813 - INFO - API register_form - Rendering form
2025-05-19 16:21:05,825 - INFO - 127.0.0.1 - - [19/May/2025 16:21:05] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 16:21:05,840 - INFO - 127.0.0.1 - - [19/May/2025 16:21:05] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:21:20,798 - INFO - API register_form - Form validated, email: sam@gmail.com
2025-05-19 16:21:20,798 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 16:21:20,802 - INFO - API register - API_MODE: external, email: sam@gmail.com
2025-05-19 16:21:20,905 - INFO - API register - External API response status: 201, body: ""
2025-05-19 16:21:20,910 - INFO - 127.0.0.1 - - [19/May/2025 16:21:20] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 16:21:20,911 - INFO - API register_form - Response status: 500, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "HpXC6hvOzlUCP1GICBXc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4364528320">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4364528640">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4364583296">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4364583456">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4364583616">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4364584096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4364584256">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">435</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>response_json = response.json()</pre>
<pre class="line before"><span class="ws">            </span>except ValueError:</pre>
<pre class="line before"><span class="ws">                </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {}</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 435, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 435, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 16:21:20,911 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "HpXC6hvOzlUCP1GICBXc";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4364528320">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4364528640">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4364583296">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4364583456">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4364583616">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4364584096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4364584256">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">435</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>response_json = response.json()</pre>
<pre class="line before"><span class="ws">            </span>except ValueError:</pre>
<pre class="line before"><span class="ws">                </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {}</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 435, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 435, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 16:21:20,912 - INFO - 127.0.0.1 - - [19/May/2025 16:21:20] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 16:21:20,923 - INFO - 127.0.0.1 - - [19/May/2025 16:21:20] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 16:38:20,038 - INFO - 127.0.0.1 - - [19/May/2025 16:38:20] "[33mGET /apple-touch-icon-precomposed.png HTTP/1.1[0m" 404 -
2025-05-19 16:38:20,039 - INFO - 127.0.0.1 - - [19/May/2025 16:38:20] "[33mGET /apple-touch-icon.png HTTP/1.1[0m" 404 -
2025-05-19 16:38:20,040 - INFO - 127.0.0.1 - - [19/May/2025 16:38:20] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-05-19 17:31:35,122 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 17:31:35,214 - INFO - Database tables created successfully
2025-05-19 17:31:35,247 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 17:31:35,248 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 17:31:35,248 - INFO -  * Restarting with stat
2025-05-19 17:31:35,560 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 17:31:35,622 - INFO - Database tables created successfully
2025-05-19 17:31:35,641 - WARNING -  * Debugger is active!
2025-05-19 17:31:35,648 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 17:32:14,029 - INFO - The CSRF token has expired.
2025-05-19 17:32:14,029 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF token has expired.']}
2025-05-19 17:32:14,029 - INFO - API register_form - Rendering form
2025-05-19 17:32:14,036 - INFO - 127.0.0.1 - - [19/May/2025 17:32:14] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 17:32:14,049 - INFO - 127.0.0.1 - - [19/May/2025 17:32:14] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 17:54:09,376 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 17:54:09,446 - INFO - Database tables created successfully
2025-05-19 17:54:09,476 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 17:54:09,476 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 17:54:09,477 - INFO -  * Restarting with stat
2025-05-19 17:54:09,789 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 17:54:09,848 - INFO - Database tables created successfully
2025-05-19 17:54:09,866 - WARNING -  * Debugger is active!
2025-05-19 17:54:09,872 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 17:54:18,970 - INFO - The CSRF token has expired.
2025-05-19 17:54:18,970 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF token has expired.']}
2025-05-19 17:54:18,970 - INFO - API register_form - Rendering form
2025-05-19 17:54:18,977 - INFO - 127.0.0.1 - - [19/May/2025 17:54:18] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 17:54:18,986 - INFO - 127.0.0.1 - - [19/May/2025 17:54:18] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 17:56:02,676 - INFO - API register_form - Form validated, email: Kim@yahoo.co.uk
2025-05-19 17:56:02,677 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 17:56:02,683 - INFO - API register - API_MODE: external, email: Kim@yahoo.co.uk
2025-05-19 17:56:02,794 - INFO - API register - External API response status: 201, body: ""
2025-05-19 17:56:02,794 - INFO - API resiter- Success status code: 201, treating as successful registration
2025-05-19 17:56:02,801 - INFO - 127.0.0.1 - - [19/May/2025 17:56:02] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 17:56:02,802 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 16:56:02 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '15156', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "doBOfslrTzqw4gxjVCAp";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4458441888">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4458442208">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4458497184">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4458496864">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4458497024">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4458497504">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4458497664">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">449</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}</pre>
<pre class="line before"><span class="ws">            </span>if response.status_code &gt;= 200 and response.status_code &lt;= 299:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API resiter- Success status code: {response.status_code}, treating as successful registration&#34;)</pre>
<pre class="line current"><span class="ws">                </span>if respose.headers.get(&#39;Content-type&#39;, &#39;&#39;).startswith(&#39;application/json&#39;):
<span class="ws">                </span>   ^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>try:</pre>
<pre class="line after"><span class="ws">                        </span>response_json = response.json()</pre>
<pre class="line after"><span class="ws">                        </span>logger.info(f&#34;API register - Parsed JSON response: {response_json}&#34;)</pre>
<pre class="line after"><span class="ws">                    </span>except ValueError:</pre>
<pre class="line after"><span class="ws">                        </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response_text}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 449, in api_register
    if respose.headers.get(&#39;Content-type&#39;, &#39;&#39;).startswith(&#39;application/json&#39;):
       ^^^^^^^
NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 449, in api_register
    if respose.headers.get('Content-type', '').startswith('application/json'):
       ^^^^^^^
NameError: name 'respose' is not defined. Did you mean: 'response'?


-->

2025-05-19 17:56:02,803 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "doBOfslrTzqw4gxjVCAp";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4458441888">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4458442208">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4458497184">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4458496864">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4458497024">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4458497504">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4458497664">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">449</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}</pre>
<pre class="line before"><span class="ws">            </span>if response.status_code &gt;= 200 and response.status_code &lt;= 299:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API resiter- Success status code: {response.status_code}, treating as successful registration&#34;)</pre>
<pre class="line current"><span class="ws">                </span>if respose.headers.get(&#39;Content-type&#39;, &#39;&#39;).startswith(&#39;application/json&#39;):
<span class="ws">                </span>   ^^^^^^^</pre>
<pre class="line after"><span class="ws">                    </span>try:</pre>
<pre class="line after"><span class="ws">                        </span>response_json = response.json()</pre>
<pre class="line after"><span class="ws">                        </span>logger.info(f&#34;API register - Parsed JSON response: {response_json}&#34;)</pre>
<pre class="line after"><span class="ws">                    </span>except ValueError:</pre>
<pre class="line after"><span class="ws">                        </span>logger.warning(f&#34;API register - Failed to parse JSON response: {response_text}&#34;)</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 449, in api_register
    if respose.headers.get(&#39;Content-type&#39;, &#39;&#39;).startswith(&#39;application/json&#39;):
       ^^^^^^^
NameError: name &#39;respose&#39; is not defined. Did you mean: &#39;response&#39;?
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 449, in api_register
    if respose.headers.get('Content-type', '').startswith('application/json'):
       ^^^^^^^
NameError: name 'respose' is not defined. Did you mean: 'response'?


-->

2025-05-19 17:56:02,803 - INFO - 127.0.0.1 - - [19/May/2025 17:56:02] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 17:56:02,815 - INFO - 127.0.0.1 - - [19/May/2025 17:56:02] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:05:40,456 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 18:05:40,542 - INFO -  * Restarting with stat
2025-05-19 18:05:40,988 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:05:41,066 - INFO - Database tables created successfully
2025-05-19 18:05:41,092 - WARNING -  * Debugger is active!
2025-05-19 18:05:41,098 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:05:54,812 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:05:54,873 - INFO - Database tables created successfully
2025-05-19 18:05:54,899 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:05:54,899 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:05:54,899 - INFO -  * Restarting with stat
2025-05-19 18:05:55,202 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:05:55,262 - INFO - Database tables created successfully
2025-05-19 18:05:55,283 - WARNING -  * Debugger is active!
2025-05-19 18:05:55,288 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:06:01,196 - INFO - API register_form - Form validated, email: Kim@yahoo.co.uk
2025-05-19 18:06:01,196 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:06:01,200 - INFO - API register - API_MODE: external, email: Kim@yahoo.co.uk
2025-05-19 18:06:01,208 - INFO - API register - External API response status: 409, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 18:06:01,208 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 18:06:01,209 - INFO - 127.0.0.1 - - [19/May/2025 18:06:01] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 18:06:01,209 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:06:01 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 18:06:01,209 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 18:06:01,217 - INFO - 127.0.0.1 - - [19/May/2025 18:06:01] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:06:01,227 - INFO - 127.0.0.1 - - [19/May/2025 18:06:01] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:07:06,300 - INFO - API register_form - Form validated, email: lisa@yahoo.co.uk
2025-05-19 18:07:06,301 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:07:06,305 - INFO - API register - API_MODE: external, email: lisa@yahoo.co.uk
2025-05-19 18:07:06,403 - INFO - API register - External API response status: 201, body: ""
2025-05-19 18:07:06,403 - INFO - API register- Success status code: 201, treating as successful registration
2025-05-19 18:07:06,403 - INFO - API register - Parsed JSON response: 
2025-05-19 18:07:06,411 - INFO - 127.0.0.1 - - [19/May/2025 18:07:06] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 18:07:06,412 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:07:06 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14823', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "eMDu0C7rcpRXdBUTpVRa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4374332896">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4374333216">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4374333536">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4374334656">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4374334016">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4374334176">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4374334336">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:07:06,412 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "eMDu0C7rcpRXdBUTpVRa";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4374332896">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4374333216">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4374333536">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4374334656">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4374334016">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4374334176">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4374334336">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:07:06,413 - INFO - 127.0.0.1 - - [19/May/2025 18:07:06] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:07:06,425 - INFO - 127.0.0.1 - - [19/May/2025 18:07:06] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:13:11,683 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 18:13:11,776 - INFO -  * Restarting with stat
2025-05-19 18:13:12,231 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:13:12,308 - INFO - Database tables created successfully
2025-05-19 18:13:12,333 - WARNING -  * Debugger is active!
2025-05-19 18:13:12,340 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:13:39,213 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:13:39,278 - INFO - Database tables created successfully
2025-05-19 18:13:39,305 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:13:39,305 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:13:39,306 - INFO -  * Restarting with stat
2025-05-19 18:13:39,623 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:13:39,685 - INFO - Database tables created successfully
2025-05-19 18:13:39,705 - WARNING -  * Debugger is active!
2025-05-19 18:13:39,712 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:14:10,430 - INFO - API register_form - Form validated, email: mary@yahoo.co.uk
2025-05-19 18:14:10,430 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:14:10,436 - INFO - API register - API_MODE: external, email: mary@yahoo.co.uk
2025-05-19 18:14:10,541 - INFO - API register - External API response status: 201, body: ""
2025-05-19 18:14:10,541 - INFO - API register- Success status code: 201, treating as successful registration
2025-05-19 18:14:10,541 - INFO - API register - Parsed JSON response: 
2025-05-19 18:14:10,550 - INFO - 127.0.0.1 - - [19/May/2025 18:14:10] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 18:14:10,551 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:14:10 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14823', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "pS6g6rX3SjAUdbnYxKDP";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4438301952">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4438302272">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4438302752">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4438308192">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4438307872">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4438308032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4438308512">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:14:10,551 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "pS6g6rX3SjAUdbnYxKDP";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4438301952">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4438302272">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4438302752">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4438308192">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4438307872">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4438308032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4438308512">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:14:10,559 - INFO - 127.0.0.1 - - [19/May/2025 18:14:10] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:14:10,570 - INFO - 127.0.0.1 - - [19/May/2025 18:14:10] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:18:14,606 - INFO - API register_form - Form validated, email: mary@yahoo.co.uk
2025-05-19 18:18:14,607 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:18:14,610 - INFO - API register - API_MODE: external, email: mary@yahoo.co.uk
2025-05-19 18:18:14,614 - INFO - API register - External API response status: 409, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 18:18:14,614 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 18:18:14,615 - INFO - 127.0.0.1 - - [19/May/2025 18:18:14] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 18:18:14,615 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:18:14 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 18:18:14,615 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 18:18:14,617 - INFO - 127.0.0.1 - - [19/May/2025 18:18:14] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:18:14,624 - INFO - 127.0.0.1 - - [19/May/2025 18:18:14] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:18:35,530 - INFO - 127.0.0.1 - - [19/May/2025 18:18:35] "GET /login HTTP/1.1" 200 -
2025-05-19 18:18:35,536 - INFO - 127.0.0.1 - - [19/May/2025 18:18:35] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:18:41,243 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: ed545d55e3b403e29bf10a7038149f8d47148ecf
2025-05-19 18:18:41,243 - WARNING - UI register - Form validation failed: {}
2025-05-19 18:18:41,251 - INFO - 127.0.0.1 - - [19/May/2025 18:18:41] "GET /register HTTP/1.1" 200 -
2025-05-19 18:18:41,258 - INFO - 127.0.0.1 - - [19/May/2025 18:18:41] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:19:38,056 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:19:38,124 - INFO - Database tables created successfully
2025-05-19 18:19:38,153 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:19:38,153 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:19:38,154 - INFO -  * Restarting with stat
2025-05-19 18:19:38,460 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:19:38,522 - INFO - Database tables created successfully
2025-05-19 18:19:38,542 - WARNING -  * Debugger is active!
2025-05-19 18:19:38,549 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:19:44,002 - INFO - API register_form - Form validated, email: mary@yahoo.co.uk
2025-05-19 18:19:44,002 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:19:44,007 - INFO - API register - API_MODE: external, email: mary@yahoo.co.uk
2025-05-19 18:19:44,015 - INFO - API register - External API response status: 409, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 18:19:44,015 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 18:19:44,015 - INFO - 127.0.0.1 - - [19/May/2025 18:19:44] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 18:19:44,016 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:19:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 18:19:44,016 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 18:19:44,023 - INFO - 127.0.0.1 - - [19/May/2025 18:19:44] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:19:44,033 - INFO - 127.0.0.1 - - [19/May/2025 18:19:44] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:20:13,403 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:20:13,474 - INFO - Database tables created successfully
2025-05-19 18:20:13,506 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:20:13,506 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:20:13,506 - INFO -  * Restarting with stat
2025-05-19 18:20:13,820 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:20:13,883 - INFO - Database tables created successfully
2025-05-19 18:20:13,903 - WARNING -  * Debugger is active!
2025-05-19 18:20:13,910 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:20:17,473 - WARNING - API register_form - Form validation failed: {}
2025-05-19 18:20:17,473 - INFO - API register_form - Rendering form
2025-05-19 18:20:17,484 - INFO - 127.0.0.1 - - [19/May/2025 18:20:17] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 18:20:17,500 - INFO - 127.0.0.1 - - [19/May/2025 18:20:17] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:20:44,627 - INFO - API register_form - Form validated, email: mary@yahoo.co.uk
2025-05-19 18:20:44,627 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:20:44,631 - INFO - API register - API_MODE: external, email: mary@yahoo.co.uk
2025-05-19 18:20:44,639 - INFO - API register - External API response status: 409, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 18:20:44,639 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 18:20:44,640 - INFO - 127.0.0.1 - - [19/May/2025 18:20:44] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 18:20:44,640 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:20:44 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 18:20:44,640 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 18:20:44,641 - INFO - 127.0.0.1 - - [19/May/2025 18:20:44] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:20:44,648 - INFO - 127.0.0.1 - - [19/May/2025 18:20:44] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:21:30,496 - INFO - API register_form - Form validated, email: Barry@gmail.com
2025-05-19 18:21:30,496 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:21:30,500 - INFO - API register - API_MODE: external, email: Barry@gmail.com
2025-05-19 18:21:30,599 - INFO - API register - External API response status: 201, body: ""
2025-05-19 18:21:30,599 - INFO - API register- Success status code: 201, treating as successful registration
2025-05-19 18:21:30,599 - INFO - API register - Parsed JSON response: 
2025-05-19 18:21:30,604 - INFO - 127.0.0.1 - - [19/May/2025 18:21:30] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 18:21:30,605 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:21:30 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14823', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "wZVk378Qo8JKBn6JZyrY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4403169216">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4401484224">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4403168896">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4403169536">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4403169376">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4403168096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4403168576">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:21:30,605 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "wZVk378Qo8JKBn6JZyrY";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4403169216">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4401484224">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4403168896">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4403169536">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4403169376">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4403168096">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4403168576">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:21:30,606 - INFO - 127.0.0.1 - - [19/May/2025 18:21:30] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:21:30,613 - INFO - 127.0.0.1 - - [19/May/2025 18:21:30] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:51:16,744 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 18:51:16,832 - INFO -  * Restarting with stat
2025-05-19 18:51:17,279 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:51:17,354 - INFO - Database tables created successfully
2025-05-19 18:51:17,379 - WARNING -  * Debugger is active!
2025-05-19 18:51:17,386 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:51:28,397 - INFO - API register_form - Form validated, email: Barry@gmail.com
2025-05-19 18:51:28,397 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:51:28,402 - INFO - API register - API_MODE: external, email: Barry@gmail.com
2025-05-19 18:51:28,410 - INFO - API register - External API response status: 409, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 17:51:28 GMT', 'Content-Length': '88'}, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 18:51:28,410 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 18:51:28,410 - INFO - 127.0.0.1 - - [19/May/2025 18:51:28] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 18:51:28,411 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:51:28 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 18:51:28,411 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 18:51:28,419 - INFO - 127.0.0.1 - - [19/May/2025 18:51:28] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:51:28,428 - INFO - 127.0.0.1 - - [19/May/2025 18:51:28] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:52:13,514 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:52:13,583 - INFO - Database tables created successfully
2025-05-19 18:52:13,612 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:52:13,612 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:52:13,613 - INFO -  * Restarting with stat
2025-05-19 18:52:13,917 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:52:13,979 - INFO - Database tables created successfully
2025-05-19 18:52:13,999 - WARNING -  * Debugger is active!
2025-05-19 18:52:14,005 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:52:17,780 - WARNING - API register_form - Form validation failed: {}
2025-05-19 18:52:17,780 - INFO - API register_form - Rendering form
2025-05-19 18:52:17,793 - INFO - 127.0.0.1 - - [19/May/2025 18:52:17] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 18:52:17,808 - INFO - 127.0.0.1 - - [19/May/2025 18:52:17] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:52:37,132 - INFO - API register_form - Form validated, email: raj@gmail.com
2025-05-19 18:52:37,132 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 18:52:37,136 - INFO - API register - API_MODE: external, email: raj@gmail.com
2025-05-19 18:52:37,239 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 17:52:37 GMT', 'Content-Length': '2'}, body: ""
2025-05-19 18:52:37,239 - INFO - API register- Success status code: 201, treating as successful registration
2025-05-19 18:52:37,239 - INFO - API register - Parsed JSON response: 
2025-05-19 18:52:37,245 - INFO - 127.0.0.1 - - [19/May/2025 18:52:37] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 18:52:37,246 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 17:52:37 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14823', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ewAakfSV87B7uu7DMI1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4407421792">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4407422112">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4407477248">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4407476928">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4407477088">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4407477568">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4407477728">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">468</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 468, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 468, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:52:37,246 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "ewAakfSV87B7uu7DMI1y";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4407421792">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4407422112">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4407477248">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4407476928">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4407477088">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4407477568">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4407477728">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">468</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 468, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 468, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 18:52:37,247 - INFO - 127.0.0.1 - - [19/May/2025 18:52:37] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 18:52:37,259 - INFO - 127.0.0.1 - - [19/May/2025 18:52:37] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 18:53:30,448 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:53:30,518 - INFO - Database tables created successfully
2025-05-19 18:53:30,546 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 18:53:30,546 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 18:53:30,547 - INFO -  * Restarting with stat
2025-05-19 18:53:30,861 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:53:30,923 - INFO - Database tables created successfully
2025-05-19 18:53:30,962 - WARNING -  * Debugger is active!
2025-05-19 18:53:30,968 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 18:58:12,405 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 18:58:12,505 - INFO -  * Restarting with stat
2025-05-19 18:58:12,929 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 18:58:13,001 - INFO - Database tables created successfully
2025-05-19 18:58:13,026 - WARNING -  * Debugger is active!
2025-05-19 18:58:13,032 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:06:45,186 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:06:45,283 - INFO - Database tables created successfully
2025-05-19 19:06:45,317 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 19:06:45,318 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 19:06:45,318 - INFO -  * Restarting with stat
2025-05-19 19:06:45,633 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:06:45,696 - INFO - Database tables created successfully
2025-05-19 19:06:45,717 - WARNING -  * Debugger is active!
2025-05-19 19:06:45,726 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:06:55,622 - INFO - 127.0.0.1 - - [19/May/2025 19:06:55] "[33mGET /api/list HTTP/1.1[0m" 404 -
2025-05-19 19:07:03,131 - INFO - 127.0.0.1 - - [19/May/2025 19:07:03] "[32mGET /list HTTP/1.1[0m" 302 -
2025-05-19 19:07:03,152 - INFO - 127.0.0.1 - - [19/May/2025 19:07:03] "GET /login?next=/list HTTP/1.1" 200 -
2025-05-19 19:07:03,163 - INFO - 127.0.0.1 - - [19/May/2025 19:07:03] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:07:13,181 - INFO - Login - User logged in: shahidk550@gmail.com
2025-05-19 19:07:13,182 - INFO - 127.0.0.1 - - [19/May/2025 19:07:13] "[32mPOST /login HTTP/1.1[0m" 302 -
2025-05-19 19:07:13,196 - INFO - Index - User: shahidk550@gmail.com, Role: user, ID: 1, Tasks: ['Task 1 - IOE  (User ID: 1)']
2025-05-19 19:07:13,206 - INFO - 127.0.0.1 - - [19/May/2025 19:07:13] "GET /list HTTP/1.1" 200 -
2025-05-19 19:07:13,215 - INFO - 127.0.0.1 - - [19/May/2025 19:07:13] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:07:20,405 - INFO - 127.0.0.1 - - [19/May/2025 19:07:20] "[32mGET /logout HTTP/1.1[0m" 302 -
2025-05-19 19:07:20,423 - INFO - 127.0.0.1 - - [19/May/2025 19:07:20] "GET /login HTTP/1.1" 200 -
2025-05-19 19:07:20,429 - INFO - 127.0.0.1 - - [19/May/2025 19:07:20] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:07:21,967 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: ed545d55e3b403e29bf10a7038149f8d47148ecf
2025-05-19 19:07:21,967 - WARNING - UI register - Form validation failed: {}
2025-05-19 19:07:21,975 - INFO - 127.0.0.1 - - [19/May/2025 19:07:21] "GET /register HTTP/1.1" 200 -
2025-05-19 19:07:21,984 - INFO - 127.0.0.1 - - [19/May/2025 19:07:21] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:07:56,843 - INFO - UI register - Request method: POST, Form data: ImmutableMultiDict([('csrf_token', 'ImVkNTQ1ZDU1ZTNiNDAzZTI5YmYxMGE3MDM4MTQ5ZjhkNDcxNDhlY2Yi.aCtzWQ.LL7-W003p7eAG8QyM8lxwtx-oLg'), ('email', 'sarah@yahoo.co.uk'), ('password', 'sarah12345'), ('confirm_password', 'sarah12345'), ('submit', 'Register')]), Session CSRF: ed545d55e3b403e29bf10a7038149f8d47148ecf
2025-05-19 19:07:56,844 - INFO - UI register - Form validated successfully
2025-05-19 19:07:56,845 - INFO - UI register - UI_MODE: internal
2025-05-19 19:07:57,192 - INFO - UI register - User registered: sarah@yahoo.co.uk redirecting to login
2025-05-19 19:07:57,192 - INFO - 127.0.0.1 - - [19/May/2025 19:07:57] "[32mPOST /register HTTP/1.1[0m" 302 -
2025-05-19 19:07:57,200 - INFO - 127.0.0.1 - - [19/May/2025 19:07:57] "GET /login HTTP/1.1" 200 -
2025-05-19 19:07:57,207 - INFO - 127.0.0.1 - - [19/May/2025 19:07:57] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:08:24,335 - INFO - Login - User logged in: sarah@yahoo.co.uk
2025-05-19 19:08:24,337 - INFO - 127.0.0.1 - - [19/May/2025 19:08:24] "[32mPOST /login HTTP/1.1[0m" 302 -
2025-05-19 19:08:24,349 - INFO - Index - User: sarah@yahoo.co.uk, Role: user, ID: 2, Tasks: []
2025-05-19 19:08:24,350 - INFO - 127.0.0.1 - - [19/May/2025 19:08:24] "GET /list HTTP/1.1" 200 -
2025-05-19 19:08:24,359 - INFO - 127.0.0.1 - - [19/May/2025 19:08:24] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:10:03,696 - INFO - 127.0.0.1 - - [19/May/2025 19:10:03] "[32mGET /logout HTTP/1.1[0m" 302 -
2025-05-19 19:10:03,710 - INFO - 127.0.0.1 - - [19/May/2025 19:10:03] "GET /login HTTP/1.1" 200 -
2025-05-19 19:10:03,718 - INFO - 127.0.0.1 - - [19/May/2025 19:10:03] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:10:05,129 - INFO - UI register - Request method: GET, Form data: ImmutableMultiDict([]), Session CSRF: ed545d55e3b403e29bf10a7038149f8d47148ecf
2025-05-19 19:10:05,129 - WARNING - UI register - Form validation failed: {}
2025-05-19 19:10:05,131 - INFO - 127.0.0.1 - - [19/May/2025 19:10:05] "GET /register HTTP/1.1" 200 -
2025-05-19 19:10:05,139 - INFO - 127.0.0.1 - - [19/May/2025 19:10:05] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:10:08,258 - INFO - 127.0.0.1 - - [19/May/2025 19:10:08] "[33mGET /apple-touch-icon-precomposed.png HTTP/1.1[0m" 404 -
2025-05-19 19:10:08,259 - INFO - 127.0.0.1 - - [19/May/2025 19:10:08] "[33mGET /apple-touch-icon.png HTTP/1.1[0m" 404 -
2025-05-19 19:10:08,260 - INFO - 127.0.0.1 - - [19/May/2025 19:10:08] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-05-19 19:11:32,370 - WARNING - API register_form - Form validation failed: {}
2025-05-19 19:11:32,370 - INFO - API register_form - Rendering form
2025-05-19 19:11:32,379 - INFO - 127.0.0.1 - - [19/May/2025 19:11:32] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 19:11:32,387 - INFO - 127.0.0.1 - - [19/May/2025 19:11:32] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:11:54,633 - INFO - API register_form - Form validated, email: tim@gmail.com
2025-05-19 19:11:54,633 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:11:54,640 - INFO - API register - API_MODE: external, email: tim@gmail.com
2025-05-19 19:11:54,742 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:11:54 GMT', 'Content-Length': '2'}, body: ""
2025-05-19 19:11:54,742 - INFO - API register- Success status code: 201, treating as successful registration
2025-05-19 19:11:54,742 - INFO - API register - Parsed JSON response: 
2025-05-19 19:11:54,750 - INFO - 127.0.0.1 - - [19/May/2025 19:11:54] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 19:11:54,751 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:11:54 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '14823', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "oWSA9gCobSjHtNjKSJ52";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4394528704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4394528864">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4394528064">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4394528224">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4394524704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4394524384">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4394524544">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">468</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 468, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 468, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:11:54,751 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "oWSA9gCobSjHtNjKSJ52";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4394528704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4394528864">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4394528064">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4394528224">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4394524704">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4394524384">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4394524544">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">468</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>&#39;error&#39;: &#39;Unexpected response from external API&#39;,</pre>
<pre class="line before"><span class="ws">                    </span>&#39;error_code&#39;: &#39;unexpected_response&#39;</pre>
<pre class="line before"><span class="ws">                </span>}), response.status_code</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 468, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 468, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:11:54,751 - INFO - 127.0.0.1 - - [19/May/2025 19:11:54] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:11:54,763 - INFO - 127.0.0.1 - - [19/May/2025 19:11:54] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:23:46,692 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:23:46,762 - INFO - Database tables created successfully
2025-05-19 19:23:46,792 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 19:23:46,792 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 19:23:46,792 - INFO -  * Restarting with stat
2025-05-19 19:23:47,097 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:23:47,158 - INFO - Database tables created successfully
2025-05-19 19:23:47,178 - WARNING -  * Debugger is active!
2025-05-19 19:23:47,186 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:23:55,899 - INFO - API register_form - Form validated, email: tim@gmail.com
2025-05-19 19:23:55,899 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:23:55,903 - INFO - API register - API_MODE: external, email: tim@gmail.com
2025-05-19 19:23:55,912 - INFO - API register - External API response status: 409, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:23:55 GMT', 'Content-Length': '88'}, body: {"error_code":"user_alread_exists","message":"a user already exists this email address"}
2025-05-19 19:23:55,912 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 19:23:55,913 - INFO - 127.0.0.1 - - [19/May/2025 19:23:55] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 19:23:55,913 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:23:55 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 19:23:55,913 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 19:23:55,921 - INFO - 127.0.0.1 - - [19/May/2025 19:23:55] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:23:55,931 - INFO - 127.0.0.1 - - [19/May/2025 19:23:55] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:24:17,843 - INFO - API register_form - Form validated, email: Jim@gmail.com
2025-05-19 19:24:17,844 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:24:17,846 - INFO - API register - API_MODE: external, email: Jim@gmail.com
2025-05-19 19:24:17,945 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:24:17 GMT', 'Content-Length': '2'}, body: ""
2025-05-19 19:24:17,945 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:24:17,945 - INFO - API register - Parsed JSON response: 
2025-05-19 19:24:17,952 - INFO - 127.0.0.1 - - [19/May/2025 19:24:17] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 19:24:17,953 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:24:17 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '15101', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P0vkBTo9xEQ6n5uLohqO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4505716032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4505716352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4505716672">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4505717792">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4505717152">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4505717312">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4505717472">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Revert to default</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API register - Non-JSON or empty response, using generated ID. Content-Type: {response.headers.get(&#39;Content-Type&#39;, &#39;unknown&#39;)}, body: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Explicitly set default</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:24:17,953 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P0vkBTo9xEQ6n5uLohqO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4505716032">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4505716352">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4505716672">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4505717792">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4505717152">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4505717312">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4505717472">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Revert to default</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API register - Non-JSON or empty response, using generated ID. Content-Type: {response.headers.get(&#39;Content-Type&#39;, &#39;unknown&#39;)}, body: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Explicitly set default</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:24:17,953 - INFO - 127.0.0.1 - - [19/May/2025 19:24:17] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:24:17,966 - INFO - 127.0.0.1 - - [19/May/2025 19:24:17] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:27:43,781 - INFO - API register_form - Form validated, email: Jim@gmail.com
2025-05-19 19:27:43,782 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:27:43,785 - INFO - API register - API_MODE: external, email: Jim@gmail.com
2025-05-19 19:27:43,883 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:27:43 GMT', 'Content-Length': '2'}, body: ""
2025-05-19 19:27:43,883 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:27:43,883 - INFO - API register - Parsed JSON response: 
2025-05-19 19:27:43,885 - INFO - 127.0.0.1 - - [19/May/2025 19:27:43] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 19:27:43,886 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:27:43 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '15101', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P0vkBTo9xEQ6n5uLohqO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4505730912">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4505730752">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4436785120">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4516086144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4516085984">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4516085824">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4516086464">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Revert to default</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API register - Non-JSON or empty response, using generated ID. Content-Type: {response.headers.get(&#39;Content-Type&#39;, &#39;unknown&#39;)}, body: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Explicitly set default</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:27:43,886 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "P0vkBTo9xEQ6n5uLohqO";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4505730912">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4505730752">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4436785120">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4516086144">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4516085984">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4516085824">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4516086464">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">467</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                    </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Revert to default</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>logger.info(f&#34;API register - Non-JSON or empty response, using generated ID. Content-Type: {response.headers.get(&#39;Content-Type&#39;, &#39;unknown&#39;)}, body: {response.text}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>response_json = {&#39;id&#39;: str(uuid.uuid4()), &#39;resource_url&#39;: &#39;&#39;}  # Explicitly set default</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
<span class="ws">            </span>              ^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>resource_url = response_json.get(&#39;resource_url&#39;, &#39;&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>try:</pre>
<pre class="line after"><span class="ws">                </span>new_api_user = APIUser(email=email, api_user_id=api_user_id)</pre>
<pre class="line after"><span class="ws">                </span>db.session.add(new_api_user)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 467, in api_register
    api_user_id = response_json.get(&#39;id&#39;, str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: &#39;str&#39; object has no attribute &#39;get&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 467, in api_register
    api_user_id = response_json.get('id', str(uuid.uuid4()))
                  ^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'


-->

2025-05-19 19:27:43,887 - INFO - 127.0.0.1 - - [19/May/2025 19:27:43] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:27:43,900 - INFO - 127.0.0.1 - - [19/May/2025 19:27:43] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:29:04,563 - INFO - API register - API_MODE: external, email: newuser2@gmail.com
2025-05-19 19:29:04,661 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:29:04 GMT', 'Content-Length': '2'}, body: ""
2025-05-19 19:29:04,661 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:29:04,661 - INFO - API register - Parsed JSON response: 
2025-05-19 19:29:04,663 - INFO - 127.0.0.1 - - [19/May/2025 19:29:04] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 19:35:29,984 - INFO -  * Detected change in '/Users/shahidkhan/Documents/Signals/my_app_test.py', reloading
2025-05-19 19:35:30,085 - INFO -  * Restarting with stat
2025-05-19 19:35:30,550 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:35:30,626 - INFO - Database tables created successfully
2025-05-19 19:35:30,651 - WARNING -  * Debugger is active!
2025-05-19 19:35:30,657 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:35:35,444 - INFO - API register_form - Form validated, email: Jim@gmail.com
2025-05-19 19:35:35,444 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:35:35,449 - INFO - API register - API_MODE: external, email: Jim@gmail.com
2025-05-19 19:35:35,457 - INFO - API register - External API response status: 409, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:35:35 GMT', 'Content-Length': '88'}, body: '{"error_code":"user_alread_exists","message":"a user already exists this email address"}'
2025-05-19 19:35:35,457 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 19:35:35,457 - INFO - 127.0.0.1 - - [19/May/2025 19:35:35] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 19:35:35,458 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:35:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 19:35:35,458 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 19:35:35,466 - INFO - 127.0.0.1 - - [19/May/2025 19:35:35] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:35:35,475 - INFO - 127.0.0.1 - - [19/May/2025 19:35:35] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:35:58,399 - INFO - API register_form - Form validated, email: Jim@gmail.com
2025-05-19 19:35:58,400 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:35:58,403 - INFO - API register - API_MODE: external, email: Jim@gmail.com
2025-05-19 19:35:58,408 - INFO - API register - External API response status: 409, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:35:58 GMT', 'Content-Length': '88'}, body: '{"error_code":"user_alread_exists","message":"a user already exists this email address"}'
2025-05-19 19:35:58,409 - WARNING - API register - External API error: a user already exists this email address
2025-05-19 19:35:58,409 - INFO - 127.0.0.1 - - [19/May/2025 19:35:58] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 19:35:58,410 - INFO - API register_form - Response status: 409, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:35:58 GMT', 'Content-Type': 'application/json', 'Content-Length': '96', 'Connection': 'close'}, body: {
  "error": "a user already exists this email address",
  "error_code": "user_alread_exists"
}

2025-05-19 19:35:58,410 - WARNING - API register_form - Registration failed: a user already exists this email address, code: user_alread_exists
2025-05-19 19:35:58,411 - INFO - 127.0.0.1 - - [19/May/2025 19:35:58] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:35:58,419 - INFO - 127.0.0.1 - - [19/May/2025 19:35:58] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:36:51,406 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:36:51,473 - INFO - Database tables created successfully
2025-05-19 19:36:51,505 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 19:36:51,505 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 19:36:51,505 - INFO -  * Restarting with stat
2025-05-19 19:36:51,820 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:36:51,881 - INFO - Database tables created successfully
2025-05-19 19:36:51,904 - WARNING -  * Debugger is active!
2025-05-19 19:36:51,912 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:36:54,792 - WARNING - API register_form - Form validation failed: {}
2025-05-19 19:36:54,792 - INFO - API register_form - Rendering form
2025-05-19 19:36:54,805 - INFO - 127.0.0.1 - - [19/May/2025 19:36:54] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 19:36:54,820 - INFO - 127.0.0.1 - - [19/May/2025 19:36:54] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:37:13,860 - INFO - API register_form - Form validated, email: tommy@gmail.com
2025-05-19 19:37:13,860 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:37:13,864 - INFO - API register - API_MODE: external, email: tommy@gmail.com
2025-05-19 19:37:13,966 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:37:13 GMT', 'Content-Length': '2'}, body: '""'
2025-05-19 19:37:13,966 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:37:13,966 - WARNING - API register - JSON response is not a dictionary: ''
2025-05-19 19:37:13,969 - INFO - API register - User stored in PostgreSQL, api_user_id: d300cf77-4a04-44cc-9fa9-9ecfe02b70de
2025-05-19 19:37:13,969 - INFO - API register - Success, api_user_id: d300cf77-4a04-44cc-9fa9-9ecfe02b70de
2025-05-19 19:37:13,975 - INFO - 127.0.0.1 - - [19/May/2025 19:37:13] "[35m[1mPOST /api/register HTTP/1.1[0m" 500 -
2025-05-19 19:37:13,976 - INFO - API register_form - Response status: 500, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:37:13 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '20116', 'Connection': 'close'}, body: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: app.json.response() takes either args or kwargs, not both
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGlt1UiamXCStV3MzHKh";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: app.json.response() takes either args or kwargs, not both
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4360865088">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360809312">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4360867968">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4360864608">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4360864768">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4360864448">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4360868128">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">491</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>db.session.rollback()</pre>
<pre class="line before"><span class="ws">                </span>logger.error(f&#34;API register - Database error: {str(e)}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>return jsonify({&#39;error&#39;: f&#39;Error storing user data in PostgreSQL: {str(e)}&#39;, &#39;error_code&#39;: &#39;database_error&#39;}), 500</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>logger.info(f&#34;API register - Success, api_user_id: {api_user_id}&#34;)</pre>
<pre class="line current"><span class="ws">            </span>return jsonify({
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>&#39;message&#39;: &#39;User registered successfully&#39;,</pre>
<pre class="line after"><span class="ws">                </span>&#39;api_user_id&#39;: api_user_id,</pre>
<pre class="line after"><span class="ws">                </span>&#39;email&#39;: email,</pre>
<pre class="line after"><span class="ws">                </span>&#39;resource_url&#39;: resource_url</pre>
<pre class="line after"><span class="ws">            </span>}, headers={&#39;Content-Type&#39;: &#39;application/json&#39;}), 200</pre></div>
</div>

<li><div class="frame" id="frame-4360810432">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
<span class="ws">    </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360810112">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">205</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param args: A single value to serialize, or multiple values to</pre>
<pre class="line before"><span class="ws">            </span>treat as a list to serialize.</pre>
<pre class="line before"><span class="ws">        </span>:param kwargs: Treat as a dict to serialize.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>obj = self._prepare_response_obj(args, kwargs)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>dump_args: dict[str, t.Any] = {}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if (self.compact is None and self._app.debug) or self.compact is False:</pre>
<pre class="line after"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-4360864928">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">79</em>,
      in <code class="function">_prepare_response_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _prepare_response_obj(</pre>
<pre class="line before"><span class="ws">        </span>self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>if args and kwargs:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(&#34;app.json.response() takes either args or kwargs, not both&#34;)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if not args and not kwargs:</pre>
<pre class="line after"><span class="ws">            </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if len(args) == 1:</pre></div>
</div>
</ul>
  <blockquote>TypeError: app.json.response() takes either args or kwargs, not both
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 491, in api_register
    return jsonify({
           ^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py&#34;, line 205, in response
    obj = self._prepare_response_obj(args, kwargs)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py&#34;, line 79, in _prepare_response_obj
    raise TypeError(&#34;app.json.response() takes either args or kwargs, not both&#34;)
TypeError: app.json.response() takes either args or kwargs, not both
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 491, in api_register
    return jsonify({
           ^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py", line 205, in response
    obj = self._prepare_response_obj(args, kwargs)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py", line 79, in _prepare_response_obj
    raise TypeError("app.json.response() takes either args or kwargs, not both")
TypeError: app.json.response() takes either args or kwargs, not both


-->

2025-05-19 19:37:13,977 - WARNING - API register_form - Invalid response from API: <!doctype html>
<html lang=en>
  <head>
    <title>TypeError: app.json.response() takes either args or kwargs, not both
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MGlt1UiamXCStV3MzHKh";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: app.json.response() takes either args or kwargs, not both
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-4360865088">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360809312">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4360867968">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4360864608">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-4360864768">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-4360864448">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4360868128">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/my_app_test.py"</cite>,
      line <em class="line">491</em>,
      in <code class="function">api_register</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                </span>db.session.rollback()</pre>
<pre class="line before"><span class="ws">                </span>logger.error(f&#34;API register - Database error: {str(e)}&#34;)</pre>
<pre class="line before"><span class="ws">                </span>return jsonify({&#39;error&#39;: f&#39;Error storing user data in PostgreSQL: {str(e)}&#39;, &#39;error_code&#39;: &#39;database_error&#39;}), 500</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>logger.info(f&#34;API register - Success, api_user_id: {api_user_id}&#34;)</pre>
<pre class="line current"><span class="ws">            </span>return jsonify({
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>&#39;message&#39;: &#39;User registered successfully&#39;,</pre>
<pre class="line after"><span class="ws">                </span>&#39;api_user_id&#39;: api_user_id,</pre>
<pre class="line after"><span class="ws">                </span>&#39;email&#39;: email,</pre>
<pre class="line after"><span class="ws">                </span>&#39;resource_url&#39;: resource_url</pre>
<pre class="line after"><span class="ws">            </span>}, headers={&#39;Content-Type&#39;: &#39;application/json&#39;}), 200</pre></div>
</div>

<li><div class="frame" id="frame-4360810432">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py"</cite>,
      line <em class="line">170</em>,
      in <code class="function">jsonify</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Added support for serializing top-level arrays. This was a</pre>
<pre class="line before"><span class="ws">        </span>security risk in ancient browsers. See :ref:`security-json`.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>.. versionadded:: 0.2</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">    </span>return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
<span class="ws">    </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-4360810112">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">205</em>,
      in <code class="function">response</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param args: A single value to serialize, or multiple values to</pre>
<pre class="line before"><span class="ws">            </span>treat as a list to serialize.</pre>
<pre class="line before"><span class="ws">        </span>:param kwargs: Treat as a dict to serialize.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>obj = self._prepare_response_obj(args, kwargs)
<span class="ws">        </span>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>dump_args: dict[str, t.Any] = {}</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if (self.compact is None and self._app.debug) or self.compact is False:</pre>
<pre class="line after"><span class="ws">            </span>dump_args.setdefault(&#34;indent&#34;, 2)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-4360864928">
  <h4>File <cite class="filename">"/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py"</cite>,
      line <em class="line">79</em>,
      in <code class="function">_prepare_response_obj</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def _prepare_response_obj(</pre>
<pre class="line before"><span class="ws">        </span>self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>if args and kwargs:</pre>
<pre class="line current"><span class="ws">            </span>raise TypeError(&#34;app.json.response() takes either args or kwargs, not both&#34;)
<span class="ws">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if not args and not kwargs:</pre>
<pre class="line after"><span class="ws">            </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if len(args) == 1:</pre></div>
</div>
</ul>
  <blockquote>TypeError: app.json.response() takes either args or kwargs, not both
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/my_app_test.py&#34;, line 491, in api_register
    return jsonify({
           ^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py&#34;, line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py&#34;, line 205, in response
    obj = self._prepare_response_obj(args, kwargs)
  File &#34;/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py&#34;, line 79, in _prepare_response_obj
    raise TypeError(&#34;app.json.response() takes either args or kwargs, not both&#34;)
TypeError: app.json.response() takes either args or kwargs, not both
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/my_app_test.py", line 491, in api_register
    return jsonify({
           ^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)  # type: ignore[return-value]
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py", line 205, in response
    obj = self._prepare_response_obj(args, kwargs)
  File "/Users/shahidkhan/Documents/Signals/new_env/lib/python3.13/site-packages/flask/json/provider.py", line 79, in _prepare_response_obj
    raise TypeError("app.json.response() takes either args or kwargs, not both")
TypeError: app.json.response() takes either args or kwargs, not both


-->

2025-05-19 19:37:13,977 - INFO - 127.0.0.1 - - [19/May/2025 19:37:13] "POST /api/register_form HTTP/1.1" 200 -
2025-05-19 19:37:13,989 - INFO - 127.0.0.1 - - [19/May/2025 19:37:13] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:45:05,765 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:45:05,857 - INFO - Database tables created successfully
2025-05-19 19:45:05,894 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-19 19:45:05,894 - INFO - [33mPress CTRL+C to quit[0m
2025-05-19 19:45:05,895 - INFO -  * Restarting with stat
2025-05-19 19:45:06,214 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-19 19:45:06,279 - INFO - Database tables created successfully
2025-05-19 19:45:06,302 - WARNING -  * Debugger is active!
2025-05-19 19:45:06,311 - INFO -  * Debugger PIN: 704-041-615
2025-05-19 19:45:09,481 - WARNING - API register_form - Form validation failed: {}
2025-05-19 19:45:09,481 - INFO - API register_form - Rendering form
2025-05-19 19:45:09,494 - INFO - 127.0.0.1 - - [19/May/2025 19:45:09] "GET /api/register_form HTTP/1.1" 200 -
2025-05-19 19:45:09,511 - INFO - 127.0.0.1 - - [19/May/2025 19:45:09] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:45:46,049 - INFO - API register_form - Form validated, email: shaz@gmail.com
2025-05-19 19:45:46,049 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-19 19:45:46,054 - INFO - API register - API_MODE: external, email: shaz@gmail.com
2025-05-19 19:45:46,156 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:45:46 GMT', 'Content-Length': '2'}, body: '""'
2025-05-19 19:45:46,156 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:45:46,156 - WARNING - API register - JSON response is not a dictionary: ''
2025-05-19 19:45:46,159 - INFO - API register - User stored in PostgreSQL, api_user_id: 7790f9cb-8162-4304-95ac-e5a2e105dac5
2025-05-19 19:45:46,159 - INFO - API register - Success, api_user_id: 7790f9cb-8162-4304-95ac-e5a2e105dac5
2025-05-19 19:45:46,160 - INFO - 127.0.0.1 - - [19/May/2025 19:45:46] "POST /api/register HTTP/1.1" 200 -
2025-05-19 19:45:46,160 - INFO - API register_form - Response status: 200, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Mon, 19 May 2025 18:45:46 GMT', 'Content-Type': 'application/json', 'Content-Length': '156', 'Connection': 'close'}, body: {
  "api_user_id": "7790f9cb-8162-4304-95ac-e5a2e105dac5",
  "email": "shaz@gmail.com",
  "message": "User registered successfully",
  "resource_url": ""
}

2025-05-19 19:45:46,160 - INFO - API register_form - Parsed JSON: {'api_user_id': '7790f9cb-8162-4304-95ac-e5a2e105dac5', 'email': 'shaz@gmail.com', 'message': 'User registered successfully', 'resource_url': ''}
2025-05-19 19:45:46,160 - INFO - API register_form - Registration successful, redirecting to login
2025-05-19 19:45:46,161 - INFO - 127.0.0.1 - - [19/May/2025 19:45:46] "[32mPOST /api/register_form HTTP/1.1[0m" 302 -
2025-05-19 19:45:46,177 - INFO - 127.0.0.1 - - [19/May/2025 19:45:46] "GET /login HTTP/1.1" 200 -
2025-05-19 19:45:46,184 - INFO - 127.0.0.1 - - [19/May/2025 19:45:46] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-19 19:49:11,267 - INFO - API register - API_MODE: external, email: newuser5@gmail.com
2025-05-19 19:49:11,366 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Mon, 19 May 2025 18:49:11 GMT', 'Content-Length': '2'}, body: '""'
2025-05-19 19:49:11,366 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-19 19:49:11,366 - WARNING - API register - JSON response is not a dictionary: ''
2025-05-19 19:49:11,368 - INFO - API register - User stored in PostgreSQL, api_user_id: 5f88ee27-e585-42d3-9fee-9efbbe1ca8f0
2025-05-19 19:49:11,368 - INFO - API register - Success, api_user_id: 5f88ee27-e585-42d3-9fee-9efbbe1ca8f0
2025-05-19 19:49:11,368 - INFO - 127.0.0.1 - - [19/May/2025 19:49:11] "POST /api/register HTTP/1.1" 200 -
2025-05-19 19:51:49,055 - INFO - API register - API_MODE: external, email: newuser5@gmail.com
2025-05-19 19:51:49,058 - WARNING - API register - Email already taken: newuser5@gmail.com
2025-05-19 19:51:49,059 - INFO - 127.0.0.1 - - [19/May/2025 19:51:49] "[31m[1mPOST /api/register HTTP/1.1[0m" 409 -
2025-05-19 19:53:37,094 - WARNING - API register - Password too short: 5 chars
2025-05-19 19:53:37,095 - INFO - 127.0.0.1 - - [19/May/2025 19:53:37] "[31m[1mPOST /api/register HTTP/1.1[0m" 400 -
2025-05-20 10:40:03,345 - INFO - The CSRF token has expired.
2025-05-20 10:40:03,347 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF token has expired.']}
2025-05-20 10:40:03,347 - INFO - API register_form - Rendering form
2025-05-20 10:40:03,349 - INFO - 127.0.0.1 - - [20/May/2025 10:40:03] "POST /api/register_form HTTP/1.1" 200 -
2025-05-20 10:40:03,359 - INFO - 127.0.0.1 - - [20/May/2025 10:40:03] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-20 10:40:43,619 - INFO - The CSRF token has expired.
2025-05-20 10:40:43,619 - WARNING - API register_form - Form validation failed: {'csrf_token': ['The CSRF token has expired.']}
2025-05-20 10:40:43,619 - INFO - API register_form - Rendering form
2025-05-20 10:40:43,620 - INFO - 127.0.0.1 - - [20/May/2025 10:40:43] "POST /api/register_form HTTP/1.1" 200 -
2025-05-20 10:40:43,625 - INFO - 127.0.0.1 - - [20/May/2025 10:40:43] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-20 10:41:50,785 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-20 10:41:50,859 - INFO - Database tables created successfully
2025-05-20 10:41:50,894 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5001
2025-05-20 10:41:50,894 - INFO - [33mPress CTRL+C to quit[0m
2025-05-20 10:41:50,894 - INFO -  * Restarting with stat
2025-05-20 10:41:51,203 - WARNING - SESSION_COOKIE_SECURE is False in production. Enable for HTTPS.
2025-05-20 10:41:51,265 - INFO - Database tables created successfully
2025-05-20 10:41:51,286 - WARNING -  * Debugger is active!
2025-05-20 10:41:51,294 - INFO -  * Debugger PIN: 704-041-615
2025-05-20 10:41:53,266 - WARNING - API register_form - Form validation failed: {}
2025-05-20 10:41:53,266 - INFO - API register_form - Rendering form
2025-05-20 10:41:53,278 - INFO - 127.0.0.1 - - [20/May/2025 10:41:53] "GET /api/register_form HTTP/1.1" 200 -
2025-05-20 10:41:53,291 - INFO - 127.0.0.1 - - [20/May/2025 10:41:53] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
2025-05-20 10:42:15,969 - INFO - API register_form - Form validated, email: daz@gmail.com
2025-05-20 10:42:15,969 - INFO - API register_form - Posting to URL: http://localhost:5001/api/register
2025-05-20 10:42:15,974 - INFO - API register - API_MODE: external, email: daz@gmail.com
2025-05-20 10:42:16,080 - INFO - API register - External API response status: 201, headers: {'Content-Type': 'application/json; charset=utf-8', 'Date': 'Tue, 20 May 2025 09:42:16 GMT', 'Content-Length': '2'}, body: '""'
2025-05-20 10:42:16,080 - INFO - API register - Success status code: 201, treating as successful registration
2025-05-20 10:42:16,080 - WARNING - API register - JSON response is not a dictionary: ''
2025-05-20 10:42:16,083 - INFO - API register - User stored in PostgreSQL, api_user_id: 3eef8497-52c0-4feb-8b2d-6fb7bc5c2a16
2025-05-20 10:42:16,083 - INFO - API register - Success, api_user_id: 3eef8497-52c0-4feb-8b2d-6fb7bc5c2a16
2025-05-20 10:42:16,083 - INFO - 127.0.0.1 - - [20/May/2025 10:42:16] "POST /api/register HTTP/1.1" 200 -
2025-05-20 10:42:16,083 - INFO - API register_form - Response status: 200, headers: {'Server': 'Werkzeug/3.1.3 Python/3.13.3', 'Date': 'Tue, 20 May 2025 09:42:16 GMT', 'Content-Type': 'application/json', 'Content-Length': '155', 'Connection': 'close'}, body: {
  "api_user_id": "3eef8497-52c0-4feb-8b2d-6fb7bc5c2a16",
  "email": "daz@gmail.com",
  "message": "User registered successfully",
  "resource_url": ""
}

2025-05-20 10:42:16,084 - INFO - API register_form - Parsed JSON: {'api_user_id': '3eef8497-52c0-4feb-8b2d-6fb7bc5c2a16', 'email': 'daz@gmail.com', 'message': 'User registered successfully', 'resource_url': ''}
2025-05-20 10:42:16,084 - INFO - API register_form - Registration successful, redirecting to login
2025-05-20 10:42:16,084 - INFO - 127.0.0.1 - - [20/May/2025 10:42:16] "[32mPOST /api/register_form HTTP/1.1[0m" 302 -
2025-05-20 10:42:16,101 - INFO - 127.0.0.1 - - [20/May/2025 10:42:16] "GET /login HTTP/1.1" 200 -
2025-05-20 10:42:16,109 - INFO - 127.0.0.1 - - [20/May/2025 10:42:16] "[36mGET /static/styles.css HTTP/1.1[0m" 304 -
